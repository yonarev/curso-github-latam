Bases de GIT, GITHUB
    https://cursos.desafiolatam.com/courses/take/taller-git-github/texts/48906546-en-que-consiste-el-curso
        Descripción

        En este curso aprenderás a controlar versiones, 
        esto en específico sobre una página web, 
        en donde veremos en específico trabajar sobre la plataforma Github.

        Unidades de aprendizaje

        Terminal, Git y GitHub: 
            identificar el proceso de creación de un repositorio remoto 
            en GitHub para controlar las versiones de un proyecto 
            y  publicar la página web utilizando GitHub Pages.
        Trabajo colaborativo y GitHub Pages: 
            comprender el desarrollo colaborativo de un proyecto con Git.


        Plataformas y software

            Firefox
          ☼  Visual Studio code (https://code.visualstudio.com/)
          ☼  Git Bash (en caso de Windows)
          ☼  Terminal (en caso de Linux y Mac)
            Git (https://git-scm.com/downloads)
            GitHub / GitHub Pages (https://github.com/)
            Xcode (en caso de MAC para instalar y actualizar GIT) 
                    (https://imageoptim.com/changelog.html)
        que es git hub 
            Es una red social de código.
            En github podemos 
                descargar millones de proyectos, 
                compartir nuestro código 
                y trabajar en equipo.
        ¿Qué necesitamos?
            Terminal: para ejecutar comandos

                El terminal es una poderosa herramienta 
                donde podemos utilizar líneas de comandos 
                para navegar por archivos y directorios. 
                Al mismo tiempo, se utiliza para interactuar 
                con programas que no tienen interfaz gráfica.
                ctrl+alt+t /linux 
                win+r+cdm /win
            Git: Para controlar versiones
            Github: Para subir y descargar proyectos

        Qué es Git?

            Imagina que estás construyendo una casa. Cada vez que agregas una nueva habitación o modificas una existente, querrás tener un registro de esos cambios, ¿verdad? Git funciona de manera similar, pero en lugar de una casa, estamos hablando de tu código. Git te permite:

            Guardar versiones de tu código: Como si tomaras una foto de tu casa en cada etapa de la construcción.
            Comparar cambios: Ver qué ha cambiado entre una versión y otra.
            Deshacer cambios: Si cometes un error, puedes volver a una versión anterior.
            Colaborar con otros: Trabajar en equipo de forma más eficiente.
            ¿Por qué es importante Git?

            Organización: Mantén tu código limpio y ordenado.
            Seguridad: Evita perder tu trabajo por errores accidentales.
            Colaboración: Trabaja en equipo de forma más efectiva.
            Profesionalismo: Es una habilidad muy valorada en el mundo del desarrollo.
            Primeros pasos: instalando Git
        descarga
            Visita la página oficial de Git: https://git-scm.com/
            Descarga el instalador: Busca la opción "64-bit Git for Windows Setup.exe" y haz clic en ella.
            Sigue las instrucciones: El instalador te guiará a través del proceso.  

            https://git-scm.com/downloads
            https://git-scm.com/downloads/win
                64-bit Git for Windows Setup.

        INSTALACION 
            sia a todo 
        EJECUCION 
            launch git bash        
    Árbol de directorios y comandos iniciales
        vscode
        ctl+ñ -> consola y  terminal 
        ctrl+shit+ñ -nuevo terminal

        WINDOWS SUBSISTEM LINUX PARA VSCODE
            WSL 
            ejecutar en cmd adminsitrador y reiniciar
                dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux 
            
            ms sotore
                INSTALAR WSL UBUNTU
                    pwd 
                    ls 
                    cd 
                    cd .. 
                    cd ~
                    ls -a h 
                    ls -l
                    ls -l | grep

    Comandos para crear carpetas y archivos
        mkdir DIRECTORIO 
        touch CREARCHIVO   
    Introducción a Git 
        Git es un sistema de control de versiones ampliamente utilizado en el desarrollo.

Git
  Llevar registro de los cambios realizados
  Recuperar versiones anteriores de nuestro código
  Recuperar archivos borrados
  Gestionar cambios realizados por otros colaboradores del proyecto
                    
    Configurando Git  (una sola vez en el equipo)
        cfg

            Configuración del user y el email

            Para configurar nuestro usuario en git, tenemos que hacerlo una sola vez en nuestro computador.

            Bash
            git config --global user.name "Tu Nombre"
            git config --global user.email tucorreo@mail.com                  
        verificacion
            verificamos los valores ingresados

            Bash
            git config --list

            Si ves los valores que ingresaste en

            user.name=Nombre Apellido
            user.email=micorreo@mail.com
            la respuesta es porque lo lograste.
            Con la letra q puedes salir de la interfaz.

    Inicializando Git
        Uso básico de Git

        Con Git configurado, nuestro siguiente paso será escribir 
        en la carpeta de nuestro último desafío lo siguiente:

        Bash
            git init


        Con ls -a podemos verificar que se creó una carpeta 
        .git que guarda toda la información de las versiones.
    agregar to2 los archivos al control de versiones 
        En un proyecto nuevo, todos los archivos están en 
        estado untracked (o sea git no revisa si se modifican o no), 
        con git add pasamos un estado de untracked a tracked.

        Luego, cuando modificamos un archivo, 
        pasa de estado no-modificado a modificado, 
        donde para agregar los cambios tenemos que volver 
        a utilizar git add.
        
        git add .
    registrar los cambios 
        git commit -m "estado inicial"  
        (retorna una respuesta)
    revisando modificaciones de los archivos
        git status
        (retorna una respuesta)
        si hay cambios lo indica
    reguardando cambios
        git add .
    regisstrando cambios 
        git commit -m "cambios realizados"
        (retorna una respuesta)
Git log
    https://cursos.desafiolatam.com/courses/take/taller-git-github/lessons/48906594-git-log
    presenta Estado total de commits del proyecto
    
resumen proceso de cambios 
        resumiendo el uso básico de git add:

        1. Estado inicial:

            Tenemos un archivo llamado index.html 
            que aún no está siendo rastreado por Git (estado untracked). 
            Esto significa que Git no está al tanto de los cambios que 
            se realicen en este archivo.
        2. Agregando el archivo al seguimiento:

            Ejecutamos el comando git add index.html.
            Con este comando, le indicamos a Git que 
            comience a rastrear los cambios que se realicen 
            en el archivo index.html. 
            El archivo pasa a estar en estado tracked.
        3. Realizando el primer commit:

            Ejecutamos el comando git commit -m "index".
            Este comando crea una instantánea de los archivos 
            que están siendo rastreados 
            (en este caso, solo index.html) 
            y la guarda en el historial de versiones de Git. 
            El mensaje "index" es un comentario que describe 
            los cambios realizados en esta versión.
        4. Editando el archivo:

            Realizamos cambios en el archivo index.html.
        5. Agregando los cambios y realizando un nuevo commit:

            Volvemos a ejecutar git add index.html para indicar 
            a Git que los cambios realizados en el archivo deben 
            ser incluidos en el siguiente commit.
            Luego, ejecutamos git commit -m "cambios" 
            para crear una nueva versión del archivo 
            con los cambios realizados, y agregarla 
            al historial de versiones.

    En resumen:

        git add 
            se utiliza para marcar los archivos que queremos 
            que Git comience a rastrear o para indicar que se han 
            realizado cambios en archivos que ya están siendo rastreados.

        git commit 
            se utiliza para crear una nueva versión de los archivos 
            que han sido modificados y agregados al seguimiento. 
            Cada commit es como una instantánea del proyecto en un momento dado.
            
        ¿Por qué es importante usar git add y git commit?

            Control de versiones: 
                Permite mantener un historial de todos 
                los cambios realizados en un proyecto, 
                lo que facilita volver a versiones anteriores 
                si es necesario.
            Colaboración: 
                Facilita el trabajo en equipo, ya que varios 
                desarrolladores pueden trabajar en el mismo 
                proyecto de forma simultánea y luego combinar sus cambios.
            Seguridad: 
                Actúa como una copia de seguridad de tu proyecto, 
                ya que puedes recuperar archivos perdidos o dañados.
            En pocas palabras: 
                git add prepara los archivos para ser guardados 
                en el historial de versiones, 
                y git commit guarda esos cambios de forma permanente.
        
        ejemplo
        git add index.html  //trackeado
        git commit -m "cambios en index.html" //guarda cambios 
        edicion del archivo 
        git commit -m "nuevos cambios en index.html" //guarda cambios 

Introducción a GitHub
    Red social que permite almacenar codigos en plataforma compartidos 
    1- registrarse 
        https://github.com/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F&source=header-home
    2- iniciar sesion
        https://github.com/login
            login
                jorgeveravidela@gmail.com 
                freeMirrorMonkey 
            direccion
                https://github.com/yonarev
            nombre 
                yonarev
            repositorios 
                https://github.com/yonarev?tab=repositories
Generando la clave SSH
    llaves publicas 
    llaves privadas

    ¿Qué es una clave SSH?
        segure shell encriptado permite conexion remota segura

        Imagina una llave que te permite acceder a tu casa. 
        En el mundo digital, las claves SSH cumplen una función similar, 
        pero te permiten acceder a tus repositorios remoto en GitHub de forma segura.

        ¿Qué son las llaves pública y privada?

        Llave pública: 
            Es como una tarjeta de presentación digital. 
            La compartes con otros (como GitHub) 
            y les permites verificar tu identidad.
        Llave privada: 
            Es tu llave personal y secreta.
            Solo tú debes conocerla. 
            Es la que te permite demostrar que eres 
            quien dices ser cuando intentas acceder a tus repositorios.
        ls -la 
            muestra todos los arhivos
                publicos y 
                privados (los privados tienen punto ejem .ssh) 
            en el archivo .ssh 
                almacena toda la info de llaves pub y privadas

                ssh-keygen -t rsa -b 4096 -C "creacion claves pp"

                -C "": 
                    Esta opción se utiliza para agregar un comentario a la clave

                -b 4096: 
                    Especifica el tamaño de la clave en bits. 
                    Un tamaño de 4096 bits es considerado seguro 
                    para la mayoría de las aplicaciones. 
                    Cuanto mayor sea el número, más segura será la clave, 
                    pero también tomará más tiempo generar.
                -t rsa: 
                    Indica que se va a generar una clave de tipo RSA. 
                    RSA es un algoritmo de cifrado asimétrico 
                    muy utilizado y considerado seguro.
    Una vez que hayas generado tu par de claves SSH 
    con una frase de contraseña segura, 
    estás listo para el siguiente paso: 
        agregar tu clave pública a tu plataforma de alojamiento 
        (como GitHub, GitLab o Bitbucket).
    
    Localizar la clave pública:

        Por defecto, la clave pública se guarda en un 
        archivo con extensión .pub 
        en el directorio .ssh 
        de tu directorio home. 
        Por ejemplo: ~/.ssh/id_rsa.pub.

                ARCHIVO
            id_rsa.pub
        RUTA
            C:\Users\notebook\.ssh
        CONTENIDO 
            ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/1akPxY0cxjZ8DTPuRwVSeZeusigIfwB8pgOPqnp2b/U8VfWATwziKWaN4/BV1jLTwHw00lmFJ0MM5aTlD6yeqfQkRsv+KIei/XQ8Cuk4dpFvW8H2T3gd56Cy8Si53Gd1C4H8VytbdHte2xkb24GvbYVLluIjtyoTJ337K6I+r1/kb4QWLnD3jUewicpLRs5jfCbLELq3TSsFol6UER5ykN6zr0ZEMZ98WwQ8GB3hC8YR54LA7UvIw6gQQvXfQjk7d/PON0VKPWoy6yklM53jOwsaRAM6r07d5ZYsKLLowCGQYH3o1UAByC4Bq9KLn71yVo2ZzyoQdNpdmTAPTSowp/z2X3xRLSdL1oss2uuRSQRL09KoEdFWauAwpVuviednyc+uKsHaF/AgcVw4uV+7OhGZMN+1M+b7U0Ucq/3LT+r8h0S9V3MWOLWkCayTL9JbRqQMmM9Rsg/wyUa09+aIakdKPKhr04FU4foRYyaE37CKDikVna4/UfYqjykt8GpizLTKtzbJjBFy83Is5xENK7ANp6WTD0ki0rXtorKsR2VQIFL1allVFbVHDLaI16SLfj43bU8Ha9NxNurTvUNJ582RjsZeEr4urm/YcmdVbOthmkT4Bk29N7VSEreCq24/SBV8BCay24zqQhqF2X9Eu3qtF2pK49H+oBHlgwprBw== creacion claves pp


    DECIRLE AL AGENTE QUE ADMINISTRA CLAVES 
         que se ejecute
         que se levante como servidor 

            Comando: eval "$(ssh-agent -s)"

                ¿Qué hace este comando?

                ssh-agent: Este es un programa que se ejecuta en segundo plano y almacena temporalmente tus claves SSH en la memoria. Esto evita tener que escribir tu frase de contraseña cada vez que quieras usar una clave SSH.
                -s: Esta opción le indica a ssh-agent que inicie en modo de salida, es decir, que imprima las variables de entorno necesarias para configurar tu shell para usar el agente SSH.
                $(): Esta sintaxis en Bash se utiliza para ejecutar el comando dentro de los paréntesis y reemplazarlo por su salida. En este caso, ejecuta ssh-agent -s y captura su salida.
                eval: Este comando toma la salida de ssh-agent -s (que son variables de entorno) y la ejecuta en el shell actual. Esto configura tu shell para usar el agente SSH.
                En resumen:

                Este comando inicia el agente SSH en segundo plano y configura tu shell para que lo utilice. De esta manera, cuando ejecutes comandos SSH, el agente buscará las claves SSH almacenadas en la memoria en lugar de pedirte la frase de contraseña cada vez.

USANDO GIT 
    SOLO UNA VEZ
        git config --global user.name "yonarev"
        git config --global user.email jorgeveravidela@gmail.com 
        git config --list  
        
        git init crea un nuevo repositorio: 
        Este comando se utiliza una sola vez para inicializar 
        un nuevo repositorio Git en un directorio.
            
            git init

    git add .
    git commit -m "Primer commit: aprendiendo git"
        [master (root-commit) 4f1eea7] Primer commit: aprendiendo git
        4 files changed, 310 insertions(+)
        create mode 100644 control-de-versiones.png
        create mode 100644 curso-github-latam.txt
        create mode 100644 proceso git.png
        create mode 100644 software/Git-2.47.0-64-bit.exe

            Has realizado los pasos correctos para configurar 
            tu nombre de usuario de Git a nivel global 
            y para inicializar un repositorio local con tus archivos.

                Veamos un resumen de lo que has hecho:

                Configuración:

                git config --global user.name "yonarev": Estableciste tu nombre de usuario de Git como "yonarev".
                git config --global user.email "jorgeveravidela@gmail.com": Estableciste tu dirección de correo electrónico de Git como "jorgeveravidela@gmail.com".
                git config --list: Este comando probablemente te mostró la configuración actual de Git, incluyendo tu nombre de usuario y correo electrónico.
                Creación del repositorio local:

                git init: Este comando inicializó un repositorio Git en la carpeta actual. Esto crea un directorio oculto llamado .git donde se almacena toda la información del repositorio.
                Añadir archivos y realizar commit:

                git add .: Este comando añadió todos los archivos y subcarpetas de la carpeta actual al seguimiento de Git.
                git commit -m "Primer commit: aprendiendo git": Este comando creó el primer commit (versión) de tu repositorio con el mensaje "Primer commit: aprendiendo git".
                Ahora tienes un repositorio local con tu código y su historial de cambios.

                Para tener una copia de seguridad en línea o compartir tu código con otros, necesitas configurarlo con un repositorio remoto en un servicio como GitHub, GitLab o Bitbucket.
        git log 
            commit 4f1eea7f56d19581b8024d2ac680e384c8139e0c (HEAD -> master)
            Author: yonarev <jorgeveravidela@gmail.com>
            Date:   Fri Oct 11 09:34:04 2024 -0300

                Primer commit: aprendiendo git
        
        La creación de la clave pública y privada SSH normalmente 
                se realiza antes de configurar un repositorio remoto.
        ssh-keygen -t rsa -b 4096 -C "creacion claves pp"
            Generating public/private rsa key pair.
            Enter file in which to save the key (C:\Users\notebook/.ssh/id_rsa): 
            Enter passphrase (empty for no passphrase): 
            Enter same passphrase again: 
            Your identification has been saved in C:\Users\notebook/.ssh/id_rsa.
            Your public key has been saved in C:\Users\notebook/.ssh/id_rsa.pub.
            The key fingerprint is:
            SHA256:OAh2QiKziAQeCOxXTgUA/JjdwG/FBZKSw96LO9+Zj7I creacion claves pp
            The key's randomart image is:
            +---[RSA 4096]----+
            |%+=.oo=oo.       |
            |BB.B +.o         |
            |=.X % .          |
            | = O B .         |
            |  . + + S        |
            |   . . .         |
            |    .            |
            |   o .. +        |
            |    oEo=..       |
            +----[SHA256]-----+

                pide passphrase: frase de seguridad 
                             "ultimo tunel"

    viendo directorio local git 
        cd . git
        ls 
            Mode                 LastWriteTime         Length Name
            ----                 -------------         ------ ----
            d-----        10/11/2024   9:32 AM                hooks
            d-----        10/11/2024   9:32 AM                info
            d-----        10/11/2024   9:34 AM                logs
            d-----        10/11/2024   9:34 AM                objects
            d-----        10/11/2024   9:32 AM                refs
            -a----        10/11/2024   9:34 AM             31 COMMIT_EDITMSG
            -a----        10/11/2024   9:32 AM            130 config
            -a----        10/11/2024   9:32 AM             73 description
            -a----        10/11/2024   9:32 AM             23 HEAD
            -a----        10/11/2024   9:34 AM            450 index

    accediendo a archivo con claves ssh 
        ARCHIVO
            id_rsa.pub
        RUTA
            C:\Users\notebook\.ssh
        CONTENIDO 
            ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/1akPxY0cxjZ8DTPuRwVSeZeusigIfwB8pgOPqnp2b/U8VfWATwziKWaN4/BV1jLTwHw00lmFJ0MM5aTlD6yeqfQkRsv+KIei/XQ8Cuk4dpFvW8H2T3gd56Cy8Si53Gd1C4H8VytbdHte2xkb24GvbYVLluIjtyoTJ337K6I+r1/kb4QWLnD3jUewicpLRs5jfCbLELq3TSsFol6UER5ykN6zr0ZEMZ98WwQ8GB3hC8YR54LA7UvIw6gQQvXfQjk7d/PON0VKPWoy6yklM53jOwsaRAM6r07d5ZYsKLLowCGQYH3o1UAByC4Bq9KLn71yVo2ZzyoQdNpdmTAPTSowp/z2X3xRLSdL1oss2uuRSQRL09KoEdFWauAwpVuviednyc+uKsHaF/AgcVw4uV+7OhGZMN+1M+b7U0Ucq/3LT+r8h0S9V3MWOLWkCayTL9JbRqQMmM9Rsg/wyUa09+aIakdKPKhr04FU4foRYyaE37CKDikVna4/UfYqjykt8GpizLTKtzbJjBFy83Is5xENK7ANp6WTD0ki0rXtorKsR2VQIFL1allVFbVHDLaI16SLfj43bU8Ha9NxNurTvUNJ582RjsZeEr4urm/YcmdVbOthmkT4Bk29N7VSEreCq24/SBV8BCay24zqQhqF2X9Eu3qtF2pK49H+oBHlgwprBw== creacion claves pp
    LEVANTANDO AGENTE 
        EXPLORER / CLICK DERECHO / OPEN GIT BASH HERE   
        LEVANTAR EL AGENTE     
            eval "$(ssh-agent -s)"
                jvv@pcwin10PRO MINGW64 ~/Documents/janvera/ARCHIVOSLAB/ESTUDIOS/GIT-HUB-BASES (master)
                    $ eval "$(ssh-agent -s)"
                    Agent pid 586
        
        PROBLEMA resuelto
            1. Verificar y habilitar el servicio OpenSSH Authentication Agent:
            Abrir Servicios:
                Presiona la tecla de Windows + R para abrir el cuadro de diálogo Ejecutar.
                Escribe services.msc y presiona Enter.
            Buscar el servicio:
                Busca el servicio "OpenSSH Authentication Agent".
            Habilitar y iniciar:
                Haz doble clic en el servicio.
                En la pestaña "General", asegúrate de que el 
                "Tipo de inicio" esté configurado en "Automático".
                Haz clic en "Iniciar" para iniciar el servicio.

            CMD 
                Start-Service ssh-agent
            RESUELTO 
                CLICK DERECHO 
                    OPEN GIT BASH HERE   

        AGREGAR AL AGENTE DE SEGUIMIENTO 
            $ ssh-add ~/.ssh/id_rsa


    AL REINICIAR 
        EXPLORER EN CARPETA
            CLICK DERECHO 
                OPEN GIT BASH HERE   
        Iniciar el agente SSH
            
            eval "$(ssh-agent -s)"
        
        Agregar tu clave privada (opcional):
            Si ya tienes una clave privada generada, puedes agregarla al agente SSH con el comando:
            
            ssh-add ~/.ssh/id_rsa
                jvv@pcwin10PRO MINGW64 ~/Documents/janvera/ARCHIVOSLAB/ESTUDIOS/GIT-HUB-BASES (master)
                    $ ssh-add ~/.ssh/id_rsa
                    Enter passphrase for /c/Users/notebook/.ssh/id_rsa:
                    Identity added: /c/Users/notebook/.ssh/id_rsa (creacion claves pp)

        Cambios en los archivo sde carpeta
            
            git add .    

            git commit -m "2do commit"
                jvv@pcwin10PRO MINGW64 ~/Documents/janvera/ARCHIVOSLAB/ESTUDIOS/GIT-HUB-BASES (master)
                    $ git commit -m "2do commit"
                    [master 62dcd27] 2do commit
                    1 file changed, 186 insertions(+), 7 deletions(-)
            
        ir por la clave 
            C:\Users\notebook\.ssh\id_rsa.pub vscode

                ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/1akPxY0cxjZ8DTPuRwVSeZeusigIfwB8pgOPqnp2b/U8VfWATwziKWaN4/BV1jLTwHw00lmFJ0MM5aTlD6yeqfQkRsv+KIei/XQ8Cuk4dpFvW8H2T3gd56Cy8Si53Gd1C4H8VytbdHte2xkb24GvbYVLluIjtyoTJ337K6I+r1/kb4QWLnD3jUewicpLRs5jfCbLELq3TSsFol6UER5ykN6zr0ZEMZ98WwQ8GB3hC8YR54LA7UvIw6gQQvXfQjk7d/PON0VKPWoy6yklM53jOwsaRAM6r07d5ZYsKLLowCGQYH3o1UAByC4Bq9KLn71yVo2ZzyoQdNpdmTAPTSowp/z2X3xRLSdL1oss2uuRSQRL09KoEdFWauAwpVuviednyc+uKsHaF/AgcVw4uV+7OhGZMN+1M+b7U0Ucq/3LT+r8h0S9V3MWOLWkCayTL9JbRqQMmM9Rsg/wyUa09+aIakdKPKhr04FU4foRYyaE37CKDikVna4/UfYqjykt8GpizLTKtzbJjBFy83Is5xENK7ANp6WTD0ki0rXtorKsR2VQIFL1allVFbVHDLaI16SLfj43bU8Ha9NxNurTvUNJ582RjsZeEr4urm/YcmdVbOthmkT4Bk29N7VSEreCq24/SBV8BCay24zqQhqF2X9Eu3qtF2pK49H+oBHlgwprBw== creacion claves pp
        cfg githubb
            settings / SSSH and GPG keys /new SSH key 
            title es identificador 
                curso-github-latam
            type 
                autentication key
            pegar key 
                ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/1akPxY0cxjZ8DTPuRwVSeZeusigIfwB8pgOPqnp2b/U8VfWATwziKWaN4/BV1jLTwHw00lmFJ0MM5aTlD6yeqfQkRsv+KIei/XQ8Cuk4dpFvW8H2T3gd56Cy8Si53Gd1C4H8VytbdHte2xkb24GvbYVLluIjtyoTJ337K6I+r1/kb4QWLnD3jUewicpLRs5jfCbLELq3TSsFol6UER5ykN6zr0ZEMZ98WwQ8GB3hC8YR54LA7UvIw6gQQvXfQjk7d/PON0VKPWoy6yklM53jOwsaRAM6r07d5ZYsKLLowCGQYH3o1UAByC4Bq9KLn71yVo2ZzyoQdNpdmTAPTSowp/z2X3xRLSdL1oss2uuRSQRL09KoEdFWauAwpVuviednyc+uKsHaF/AgcVw4uV+7OhGZMN+1M+b7U0Ucq/3LT+r8h0S9V3MWOLWkCayTL9JbRqQMmM9Rsg/wyUa09+aIakdKPKhr04FU4foRYyaE37CKDikVna4/UfYqjykt8GpizLTKtzbJjBFy83Is5xENK7ANp6WTD0ki0rXtorKsR2VQIFL1allVFbVHDLaI16SLfj43bU8Ha9NxNurTvUNJ582RjsZeEr4urm/YcmdVbOthmkT4Bk29N7VSEreCq24/SBV8BCay24zqQhqF2X9Eu3qtF2pK49H+oBHlgwprBw== creacion claves pp

            QUEDA EN GITHUB 
                SSH keys
                    This is a list of SSH keys associated with your account. Remove any keys that you do not recognize.

                    Authentication keys
                    SSH
                    curso-github-latam
                    SHA256:OAh2QiKziAQeCOxXTgUA/JjdwG/FBZKSw96LO9+Zj7I
                    Added on Oct 11, 2024
                    Never used — Read/write
Subiendo a GitHub (Parte I)
    enlazar desde mi pc a la plataforma en la red
        github / new repository
            repository name
                curso-github-latam

            descripcion

            publico

            boton crear repositorio
        ir por conjunto de comandos y preparar
            …or create a new repository on the command line
                echo "# curso-github-latam" >> README.md
                git init
                git add README.md //solo esta agregando readme
                git commit -m "3er commit"
                git branch -M main
                git remote add origin https://github.com/yonarev/curso-github-latam.git
                git push -u origin main

        EJECUTAR LOS COMANDOS EN GIT BASH 
            PROBLEMAS CON LA CLAVE
                Cambiar el origen de tu repositorio a SSH:
                    Cambia la URL del remoto en Git para usar SSH en lugar de HTTPS:

                git remote set-url origin git@github.com:yonarev/curso-github-latam.git

                git push -u origin main
                    ahora va a pedir frase secreta "ultimo tunel"

                    jvv@pcwin10PRO MINGW64 ~/Documents/janvera/ARCHIVOSLAB/ESTUDIOS/GIT-HUB-BASES (main)
                        $ git push origin main
                        Enter passphrase for key '/c/Users/notebook/.ssh/id_rsa':
                        Enumerating objects: 13, done.
                        Counting objects: 100% (13/13), done.
                        Delta compression using up to 2 threads
                        Compressing objects: 100% (11/11), done.
                        Writing objects: 100% (13/13), 65.38 MiB | 526.00 KiB/s, done.
                        Total 13 (delta 3), reused 0 (delta 0), pack-reused 0 (from 0)
                        remote: Resolving deltas: 100% (3/3), done.
                        remote: warning: See https://gh.io/lfs for more information.
                        remote: warning: File software/Git-2.47.0-64-bit.exe is 65.59 MB; this is larger than GitHub's recommended maximum file size of 50.00 MB
                        remote: warning: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.
                        To github.com:yonarev/curso-github-latam.git
                        * [new branch]      main -> main

    SUBIENDO TODO 
        git add .
        git commit -m "4to commit"
        git push -u origin main
Subiendo a GitHub (Parte II)
    subiendo al hacer cambios 
    creamos index.html
        git add .
        git commit -m "5to commit"
        git push -u origin main

    ESTADO DE GIT 
        jvv@pcwin10PRO MINGW64 ~/Documents/janvera/ARCHIVOSLAB/ESTUDIOS/GIT-HUB-BASES (main)
            $ git status
                On branch main
                Your branch is up to date with 'origin/main'.

                Changes not staged for commit:
                (use "git add <file>..." to update what will be committed)
                (use "git restore <file>..." to discard changes in working directory)
                        modified:   curso-github-latam.txt

                Untracked files:
                (use "git add <file>..." to include in what will be committed)
                        cfg-git-1.png
                        cfg-git-2.png
                        comandos-git.png
                        comandos-linux.png

                no changes added to commit (use "git add" and/or "git commit -a")
    CAMBIOS DE ESTADO 
        jvv@pcwin10PRO MINGW64 ~/Documents/janvera/ARCHIVOSLAB/ESTUDIOS/GIT-HUB-BASES (main)
            $ git log
                commit e9e14b59cd7bd7750478ba01403138cf5ede94c8 (HEAD -> main, origin/main)
                Author: yonarev <jorgeveravidela@gmail.com>
                Date:   Fri Oct 11 15:59:49 2024 -0300

                    5to commit

                commit e864511d2b95b76c0eb5d82ec48ff9c3d00f56b0
                Author: yonarev <jorgeveravidela@gmail.com>
                Date:   Fri Oct 11 15:44:25 2024 -0300

                    4to commit

                commit 348fb0f76f9d30f3ee410564f830c8d6f415e2f4
                Author: yonarev <jorgeveravidela@gmail.com>
                Date:   Fri Oct 11 15:07:56 2024 -0300

                    3er commit

                commit 62dcd270e3bdab26350f3fa5ba32d56688ccf021
                Author: yonarev <jorgeveravidela@gmail.com>
                Date:   Fri Oct 11 14:38:13 2024 -0300

                    2do commit

                commit 4f1eea7f56d19581b8024d2ac680e384c8139e0c
                Author: yonarev <jorgeveravidela@gmail.com>
                Date:   Fri Oct 11 09:34:04 2024 -0300

                    Primer commit: aprendiendo git
                
Guía de estudio - GitHub 
        Comandos básicos de Git
        Comandos de configuración
            git config: Configura opciones generales de Git, como tu nombre de usuario y correo electrónico. Estos datos se asociarán a tus commits y se mostrarán en el historial de cambios.
            Ejemplo: git config --global user.name "Tu Nombre"
            --global: Aplica la configuración a nivel global, afectando a todos tus repositorios.
        Comandos de inicio
            git init: Inicializa un nuevo repositorio de Git en el directorio actual. Esto crea una carpeta oculta llamada .git que almacena toda la información del repositorio.
            Ejemplo: git init mi-proyecto
        Comandos de trabajo con archivos
            git add: Agrega los cambios de los archivos modificados al área de preparación (staging area). Estos cambios serán parte del próximo commit.
            Ejemplo: git add archivo1.txt archivo2.py
            git commit: Crea un nuevo commit con los cambios que están en el área de preparación. Cada commit es una instantánea del proyecto en un momento dado.
            Ejemplo: git commit -m "Mensaje descriptivo del commit"
        Comandos de registro
            git status: Muestra el estado actual del repositorio, indicando qué archivos han sido modificados, cuáles están listos para ser comprometidos y cuáles están siendo ignorados.
            git log: Muestra un registro de todos los commits realizados en el repositorio, desde el más reciente hasta el más antiguo. Puedes personalizar la salida con opciones como --oneline para una vista más concisa o --graph para visualizar la historia como un gráfico.
            Ejemplo: git log --oneline
        Otros comandos útiles
            git branch: Gestiona las ramas de tu proyecto. Puedes crear nuevas ramas, listar las ramas existentes y cambiar entre ellas.
            git merge: Combina los cambios de una rama en otra.
            git checkout: Cambia a una rama existente o crea una nueva a partir de un commit específico.
            git remote: Gestiona las conexiones a repositorios remotos.
            git pull: Obtiene los cambios más recientes de un repositorio remoto y los fusiona en tu rama local.
            git push: Envía los cambios locales a un repositorio remoto.
        Detalles adicionales:
            Área de preparación (staging area): Un espacio temporal donde se almacenan los cambios antes de ser comprometidos.
            Commit: Una instantánea del proyecto en un momento dado. Cada commit tiene un identificador único (hash).
            Rama: Una línea de desarrollo independiente. Puedes crear múltiples ramas para trabajar en diferentes características sin afectar la rama principal.
            Repositorio remoto: Una copia del repositorio en un servidor (como GitHub, GitLab o Bitbucket).    

actividades 
    Actividad 2: Agregando de archivos

        Crea una carpeta llamada actividad-con-git
        Dentro de la carpeta crea el archivo index.html
        Inicializa git con git init
        Agrega el archivo index.html con git add
        Verifica que haya sido agregado con git status
        Confirma el cambio con git commit -m "Mi primer commit"
        Revisa con git log que el commit se haya realizado correctamente.
        Revisa con git status que el estado del archivo haya cambiado.
        Si en git log el autor (author) 
        aparece como unknown se debe a que te saltaste 
        o te equivocaste un paso en el capítulo configurando git de esta guía.
    
    Actividad 3: Agregando y borrando archivos

        En esta actividad, aprenderás a agregar 
        y borrar archivos en un repositorio de Git. 
        Primero, crearás un nuevo repositorio 
        y agregarás dos archivos al índice de Git mediante los comandos 
            git add y git commit. 
        Luego, borrarás uno de los archivos 
        y crearás otro commit con el mensaje "Borrado archivo1.txt". 
        Finalmente, revisarás el registro de commits usando el comando git log.

        Crea un nuevo repositorio de Git en tu computadora usando el comando git init.
        Crea un archivo llamado archivo1.txt y escribe algo de texto en él.
        Agrega el archivo al índice de Git usando el comando git add.
        Crea un commit con el mensaje "Agregado archivo1.txt" usando el comando git commit.
        Crea otro archivo llamado archivo2.txt y escribe algo de texto en él.
        Agrega el archivo al índice de Git usando el comando git add.
        Crea un commit con el mensaje "Agregado archivo2.txt" usando el comando git commit.
        Borra el archivo archivo1.txt usando el comando rm archivo1.txt.
        Agrega el cambio al índice de Git usando el comando git add.
        Crea un commit con el mensaje "Borrado archivo1.txt" usando el comando git commit.
        Revisa el registro de commits usando el comando git log.


    Actividad 4: Realizando nuestro primer fork
        Fork de un proyecto

            Entendamos un fork como una bifurcación del proyecto, 
            esto es tomar el original y poder realizar todas las 
            modificaciones que queramos para nuestro propósito.

        Ingresa a: https://github.com/gsanchezd/fdsw-github
        Haz clic en la opción fork.
        Serás redirigido a la bifurcación del proyecto en tu cuenta, es muy importante que no saltes este paso o luego no podrás subir cambios.
        Haz clic en la opción code.
        Descarga el proyecto utilizando git clone.
        Selecciona la opción ssh.
        La opción https ya no funciona en github.
        Copia la dirección.
        En el terminal ingresa a tu carpeta de proyectos con cd proyectos.
        Si no tienes puedes crear una con mkdir proyectos.
        Descarga el proyecto utilizando git clone dirección_copiada cv2.
        <Un proyecto clonado viene con la carpeta .git incluida, no se requiere hacer git init>
        
        Carga la carpeta cv2 descargada en el editor de código.
        Cambia el header utilizando el editor de código.
        Agrega los cambios utilizando git add nombre_archivo
        Confirma los cambios utilizando git commit -m "primeros cambios"
        Sube los cambios utilizando git push origin main.
        Revisa en github que los cambios se hayan subido haciendo clic en el archivo modificado.
        La fecha del último commit es también un buen indicador. 

Estados de un archivo en Git:

        El diagrama muestra cuatro estados principales por los que puede pasar un archivo en un repositorio Git:

        Untracked (No rastreado): 
            El archivo existe en tu directorio de trabajo, 
            pero Git aún no lo está siguiendo. 
            Es decir, no forma parte del control de versiones.
        Unmodified (Sin modificaciones): 
            El archivo está siendo rastreado por Git 
            y su contenido coincide con la última versión guardada en el repositorio.
        Modified (Modificado): 
            El archivo ha sido modificado desde la última vez que se guardó 
            en el repositorio. Estos cambios aún no se han registrado.
        Staged (Preparado): 
            Los cambios realizados en el archivo han sido marcados 
            para ser incluidos en el próximo commit. 
            Es decir, están listos para ser guardados de forma permanente en el repositorio.

        Flujo de trabajo básico:

        Untracked -> Modified: 
            Cuando creas un nuevo archivo o modificas uno existente, 
            este pasa del estado "Untracked" al estado "Modified".
            Git detecta que hay cambios que no han sido registrados.
        Modified -> Staged: 
            Para incluir los cambios en el próximo commit, 
            utilizas el comando git add. 
            Esto mueve el archivo del estado "Modified" al estado "Staged".
        Staged -> Committed: 
            Con el comando git commit, se crea un nuevo commit 
            en el repositorio, incluyendo todos los archivos que
            están en el estado "Staged". 
            Estos archivos pasan entonces al estado "Unmodified", 
            ya que su contenido coincide con la última versión guardada.
        Modified -> Removed: 
            Si deseas eliminar un archivo del repositorio, 
            puedes usar el comando 
                git rm. 
            
            Esto marca el archivo para ser eliminado en el próximo commit.

        Consideraciones:

            Un archivo no trackeado pasa a staged (en preparación) 
                vía git add. 
                a. Al principio de un proyecto, 
                cuando recién hacemos git init, todos los archivos 
                están en estado no trackeado. 
                b. Al agregar un archivo con git add pasa a staged. 
                c. Al confirmar (commit) pasa a modificado.
            Un archivo no modificado pasa a modificado cuando lo editamos. 
                a. Luego confirmamos los cambios con git commit 
                    y con esto vuelve a un estado no confirmado. 
                b. Podemos ver el estado de los archivos con git status. 
                c. Podemos ver todas las confirmaciones hechas con git log.

Subiendo cambios con git push
    En la actividad anterior 
    utilizamos el comando git push, 
    este se utiliza para subir los cambios al repositorio remoto. A continuación lo explicaremos.
    Analizando git push
        Las partes del comando git push son:
        
        git push remote branch

    Donde:
        remote es el punto de destino, este fue configurado automáticamente 
        cuando hicimos un clon del proyecto, esta dirección también recibió 
        un alias llamado origin, el cual es un estándar.

        branch es la rama del proyecto, 
            las ramas son un elemento importante de Git de lo cual 
            no hemos profundizado todavía. La rama por defecto en github es main.
        Por lo tanto, al escribir 
            
            git push origin main 
            
            como lo hicimos en la actividad, 
        estamos diciendo a git que suba el código al punto remoto configurado, 
        el cual es nuestro repositorio en github y a la rama principal de este repositorio.

    Por ahora, todas las actualizaciones cambios las realizaremos utilizando git push origin main.

Resumen

    GitHub es un gestor de repositorios remotos, lo que quiere decir que 
    podemos almacenar una copia de nuestro código en sus servidores. 
    Así podemos trabajar colaborativamente y respaldar nuestro trabajo.

    Las llaves, la pública y privada, son un medio por el cual podemos identificar 
    nuestro equipo con un servidor o página específica, 
    incluso sin tener que ingresar una contraseña.

    Fork es una acción que creará una bifurcación del repositorio, 
    en otras palabras realizará una copia del proyecto completo 
    en nuestra propia cuenta de GitHub.

    Podemos descargar un proyecto desde GitHub utilizando 

        git clone dirección_del_proyecto [nombre_del_proyecto]. 

        Los corchetes indican que el argumento es opcional, 
        es decir, podemos omitir el nombre del proyecto 
        y en ese caso el nombre utilizado será el de github.

    Para subir los cambios al repositorio remoto debemos 
    utilizar el comando 

        git push origin main.

EJECUTANDO GIT para el respaldo diario de este contenido 
    git add .
    git commit -m "6to commit"
    git push -u origin main

        jvv@pcwin10PRO MINGW64 ~/Documents/janvera/ARCHIVOSLAB/ESTUDIOS/GIT-HUB-BASES (main)
            $     git add .

        jvv@pcwin10PRO MINGW64 ~/Documents/janvera/ARCHIVOSLAB/ESTUDIOS/GIT-HUB-BASES (main)
            $     git commit -m "6to commit"
            
            [main 2d5edb7] 6to commit
            7 files changed, 267 insertions(+), 3 deletions(-)
            create mode 100644 cfg-git-1.png
            create mode 100644 cfg-git-2.png
            create mode 100644 comandos-git.png
            create mode 100644 comandos-linux.png
            create mode 100644 flujo-git-real.webp
            create mode 100644 flujo-git.png

        jvv@pcwin10PRO MINGW64 ~/Documents/janvera/ARCHIVOSLAB/ESTUDIOS/GIT-HUB-BASES (main)
            $     git push -u origin main
            
            Enter passphrase for key '/c/Users/notebook/.ssh/id_rsa':
            Enumerating objects: 11, done.
            Counting objects: 100% (11/11), done.
            Delta compression using up to 2 threads
            Compressing objects: 100% (9/9), done.
            Writing objects: 100% (9/9), 297.68 KiB | 1.34 MiB/s, done.
            Total 9 (delta 1), reused 0 (delta 0), pack-reused 0 (from 0)
            remote: Resolving deltas: 100% (1/1), completed with 1 local object.
            To github.com:yonarev/curso-github-latam.git
            e9e14b5..2d5edb7  main -> main
            branch 'main' set up to track 'origin/main'.

        jvv@pcwin10PRO MINGW64 ~/Documents/janvera/ARCHIVOSLAB/ESTUDIOS/GIT-HUB-BASES (main)
            $ git status
            
            On branch main
            Your branch is up to date with 'origin/main'.

            Changes not staged for commit:
            (use "git add <file>..." to update what will be committed)
            (use "git restore <file>..." to discard changes in working directory)
                    modified:   curso-github-latam.txt

            no changes added to commit (use "git add" and/or "git commit -a")

        jvv@pcwin10PRO MINGW64 ~/Documents/janvera/ARCHIVOSLAB/ESTUDIOS/GIT-HUB-BASES (main)
            $ git log

            commit 2d5edb7ef59dcdd13cb5e6c6dddc920c1cf16f04 (HEAD -> main, origin/main)
            Author: yonarev <jorgeveravidela@gmail.com>
            Date:   Fri Oct 11 16:50:51 2024 -0300

                6to commit

            commit e9e14b59cd7bd7750478ba01403138cf5ede94c8
            Author: yonarev <jorgeveravidela@gmail.com>
            Date:   Fri Oct 11 15:59:49 2024 -0300

                5to commit

            commit e864511d2b95b76c0eb5d82ec48ff9c3d00f56b0
            Author: yonarev <jorgeveravidela@gmail.com>
            Date:   Fri Oct 11 15:44:25 2024 -0300

                4to commit

            commit 348fb0f76f9d30f3ee410564f830c8d6f415e2f4
            Author: yonarev <jorgeveravidela@gmail.com>
            Date:   Fri Oct 11 15:07:56 2024 -0300

                3er commit

            commit 62dcd270e3bdab26350f3fa5ba32d56688ccf021
            Author: yonarev <jorgeveravidela@gmail.com>
            Date:   Fri Oct 11 14:38:13 2024 -0300

                2do commit

            commit 4f1eea7f56d19581b8024d2ac680e384c8139e0c
            Author: yonarev <jorgeveravidela@gmail.com>
            Date:   Fri Oct 11 09:34:04 2024 -0300

                Primer commit: aprendiendo git

PRUEBA Quiz - Terminal, Git y GitHub
    De acuerdo a lo aprendido, ¿Cuál es el comando para listar los archivos NO ocultos que estén en un directorio?

        Seleccione solamente LA MEJOR respuesta

        A
        cd

        B
       ƒ ls

        C
        ls -a


        Confirmar
        Esta respuesta es correcta.
            El comando ls significa list, este nos permite listar todos los elementos de un directorio que tengan permiso de visualización.
    
                ¿A qué corresponde la siguiente definición: “Es un comando que nos permite crear un directorio”?

            Seleccione solamente LA MEJOR respuesta

            A
            touch

            B
            ƒ mkdir

            Esta respuesta es correcta.
            El comando mkdir significa make directory, este nos habilita la opción de generar directorios.

    ¿A qué corresponde la siguiente definición: “Es un comando que nos sirve para inicializar los servicios de git en un directorio”?

            Seleccione solamente LA MEJOR respuesta

            A
            ƒ git init

            B
            git push

            C
            git commit

            Esta respuesta es correcta.
                git push: enviar los cambios realizados al destino en que se encuentre el repositorio.
                git commit: permite generar o guardar los cambios efectuados y además incorporar una breve descripción de dichos cambios.
                git init: inicializa los servicios de git por lo que habilita el control de versiones en un directorio.

    A partir de lo aprendido, 
        ¿Cómo se define o interpreta el comando git push origin main?

        Seleccione solamente LA MEJOR respuesta

        A
        Enviar los cambios de manera local.

        B
        Enviar los cambios en una rama que no es la principal.

        C
        ƒ Enviar los cambios a la rama principal. 

        Esta respuesta es correcta.
            El comando git push origin main envía los cambios a nuestra rama principal.
            
            Has completado Quiz - Terminal, Git y GitHub
            Su resultado
            100%

AQUI VAMOS 
    https://cursos.desafiolatam.com/courses/take/taller-git-github/downloads/48906601-desafio-github
    Desafío - GitHub.pdf

EJECUTANDO GIT para el respaldo diario de este contenido 
    git add .
    git commit -m "7to commit"
    git push -u origin main